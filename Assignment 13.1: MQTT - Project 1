/*
  Nickolaus Grant
  CSC:230 - Internet of Things
  Assignment 13.1: Using MQTT

  Project 1:
  Connect M5Core2 to Wi-Fi, subscribe to an MQTT topic, and print any messages 
  received to the Serial Monitor.

  Note: Project 2 is very similar to Project 1, but also displays the message 
  on the LCD and keeps a message count.
*/

// These are the Libaraies needed to complete Project 1
#include <WiFi.h>
#include <PubSubClient.h>
#include <M5Core2.h>

// Wi-Fi credentials 
const char* ssid = "Ping Me Up";     
const char* password = "Hub227!by";   

// MQTT broker connection settings 
const char* mqtt_server = "test.mosquitto.org"; 
const int mqtt_port = 1883;                     

// MQTT topic to subscribe to
const char* mqtt_topic = "m5core2/nicko/messages";

// Create a Wi-Fi client for network communication
WiFiClient espClient;

// Create an MQTT client using the Wi-Fi client
PubSubClient client(espClient);

// Callback function - This function is automatically called when a new MQTT message is received
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived ["); 
  Serial.print(topic);               
  Serial.print("] ");                 
  for (unsigned int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println(); 
}
void setup_wifi() {
  Serial.print("Connecting to "); 
  Serial.println(ssid);           
  WiFi.begin(ssid, password);     
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);                   
    Serial.print(".");            
  }
  Serial.println("\nWiFi connected");
  Serial.print("IP address: ");    
  Serial.println(WiFi.localIP());
}

// Connect (or reconnect) to MQTT broker 
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("M5ClientNicko")) {
      Serial.println("connected");
      client.subscribe(mqtt_topic);
      client.publish(mqtt_topic, "M5Core2 is online and receiving message for project 1");
    } else {
      Serial.print(" failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
    
      delay(5000);
    }
  }
}

// Arduino setup Function 
void setup() {
  M5.begin();                 
  Serial.begin(115200);       
  setup_wifi();               
  client.setServer(mqtt_server, mqtt_port); 
  client.setCallback(callback);             
}

// loop Function
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}
